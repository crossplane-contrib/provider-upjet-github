/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryCustomPropertyInitParameters struct {

	// Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
	// Name of the custom property.
	PropertyName *string `json:"propertyName,omitempty" tf:"property_name,omitempty"`

	// Type of the custom property. Can be one of single_select, multi_select, string, or true_false
	// Type of the custom property
	PropertyType *string `json:"propertyType,omitempty" tf:"property_type,omitempty"`

	// Value of the custom property in the form of an array. Properties of type single_select, string, and true_false are represented as a string array of length 1
	// Value of the custom property.
	// +listType=set
	PropertyValue []*string `json:"propertyValue,omitempty" tf:"property_value,omitempty"`

	// The repository of the environment.
	// Name of the repository which the custom properties should be on.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

type RepositoryCustomPropertyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
	// Name of the custom property.
	PropertyName *string `json:"propertyName,omitempty" tf:"property_name,omitempty"`

	// Type of the custom property. Can be one of single_select, multi_select, string, or true_false
	// Type of the custom property
	PropertyType *string `json:"propertyType,omitempty" tf:"property_type,omitempty"`

	// Value of the custom property in the form of an array. Properties of type single_select, string, and true_false are represented as a string array of length 1
	// Value of the custom property.
	// +listType=set
	PropertyValue []*string `json:"propertyValue,omitempty" tf:"property_value,omitempty"`

	// The repository of the environment.
	// Name of the repository which the custom properties should be on.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type RepositoryCustomPropertyParameters struct {

	// Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
	// Name of the custom property.
	// +kubebuilder:validation:Optional
	PropertyName *string `json:"propertyName,omitempty" tf:"property_name,omitempty"`

	// Type of the custom property. Can be one of single_select, multi_select, string, or true_false
	// Type of the custom property
	// +kubebuilder:validation:Optional
	PropertyType *string `json:"propertyType,omitempty" tf:"property_type,omitempty"`

	// Value of the custom property in the form of an array. Properties of type single_select, string, and true_false are represented as a string array of length 1
	// Value of the custom property.
	// +kubebuilder:validation:Optional
	// +listType=set
	PropertyValue []*string `json:"propertyValue,omitempty" tf:"property_value,omitempty"`

	// The repository of the environment.
	// Name of the repository which the custom properties should be on.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

// RepositoryCustomPropertySpec defines the desired state of RepositoryCustomProperty
type RepositoryCustomPropertySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryCustomPropertyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryCustomPropertyInitParameters `json:"initProvider,omitempty"`
}

// RepositoryCustomPropertyStatus defines the observed state of RepositoryCustomProperty.
type RepositoryCustomPropertyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryCustomPropertyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryCustomProperty is the Schema for the RepositoryCustomPropertys API. Creates and a specific custom property for a GitHub repository
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type RepositoryCustomProperty struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.propertyName) || (has(self.initProvider) && has(self.initProvider.propertyName))",message="spec.forProvider.propertyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.propertyType) || (has(self.initProvider) && has(self.initProvider.propertyType))",message="spec.forProvider.propertyType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.propertyValue) || (has(self.initProvider) && has(self.initProvider.propertyValue))",message="spec.forProvider.propertyValue is a required parameter"
	Spec   RepositoryCustomPropertySpec   `json:"spec"`
	Status RepositoryCustomPropertyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryCustomPropertyList contains a list of RepositoryCustomPropertys
type RepositoryCustomPropertyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryCustomProperty `json:"items"`
}

// Repository type metadata.
var (
	RepositoryCustomProperty_Kind             = "RepositoryCustomProperty"
	RepositoryCustomProperty_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryCustomProperty_Kind}.String()
	RepositoryCustomProperty_KindAPIVersion   = RepositoryCustomProperty_Kind + "." + CRDGroupVersion.String()
	RepositoryCustomProperty_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryCustomProperty_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryCustomProperty{}, &RepositoryCustomPropertyList{})
}
