/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BranchProtectionv3InitParameters struct {

	// The Git branch to protect.
	// The Git branch to protect.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Boolean, setting this to true enforces status checks for repository administrators.
	// Setting this to 'true' enforces status checks for repository administrators.
	EnforceAdmins *bool `json:"enforceAdmins,omitempty" tf:"enforce_admins,omitempty"`

	// The GitHub repository name.
	// The GitHub repository name.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// Boolean, setting this to true requires all conversations on code must be resolved before a pull request can be merged.
	// Setting this to 'true' requires all conversations on code must be resolved before a pull request can be merged.
	RequireConversationResolution *bool `json:"requireConversationResolution,omitempty" tf:"require_conversation_resolution,omitempty"`

	// Boolean, setting this to true requires all commits to be signed with GPG.
	// Setting this to 'true' requires all commits to be signed with GPG.
	RequireSignedCommits *bool `json:"requireSignedCommits,omitempty" tf:"require_signed_commits,omitempty"`

	// Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
	// Enforce restrictions for pull request reviews.
	RequiredPullRequestReviews []BranchProtectionv3RequiredPullRequestReviewsInitParameters `json:"requiredPullRequestReviews,omitempty" tf:"required_pull_request_reviews,omitempty"`

	// Enforce restrictions for required status checks. See Required Status Checks below for details.
	// Enforce restrictions for required status checks.
	RequiredStatusChecks []BranchProtectionv3RequiredStatusChecksInitParameters `json:"requiredStatusChecks,omitempty" tf:"required_status_checks,omitempty"`

	// Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
	// Enforce restrictions for the users and teams that may push to the branch.
	Restrictions []RestrictionsInitParameters `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type BranchProtectionv3Observation struct {

	// The Git branch to protect.
	// The Git branch to protect.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Boolean, setting this to true enforces status checks for repository administrators.
	// Setting this to 'true' enforces status checks for repository administrators.
	EnforceAdmins *bool `json:"enforceAdmins,omitempty" tf:"enforce_admins,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The GitHub repository name.
	// The GitHub repository name.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Boolean, setting this to true requires all conversations on code must be resolved before a pull request can be merged.
	// Setting this to 'true' requires all conversations on code must be resolved before a pull request can be merged.
	RequireConversationResolution *bool `json:"requireConversationResolution,omitempty" tf:"require_conversation_resolution,omitempty"`

	// Boolean, setting this to true requires all commits to be signed with GPG.
	// Setting this to 'true' requires all commits to be signed with GPG.
	RequireSignedCommits *bool `json:"requireSignedCommits,omitempty" tf:"require_signed_commits,omitempty"`

	// Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
	// Enforce restrictions for pull request reviews.
	RequiredPullRequestReviews []BranchProtectionv3RequiredPullRequestReviewsObservation `json:"requiredPullRequestReviews,omitempty" tf:"required_pull_request_reviews,omitempty"`

	// Enforce restrictions for required status checks. See Required Status Checks below for details.
	// Enforce restrictions for required status checks.
	RequiredStatusChecks []BranchProtectionv3RequiredStatusChecksObservation `json:"requiredStatusChecks,omitempty" tf:"required_status_checks,omitempty"`

	// Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
	// Enforce restrictions for the users and teams that may push to the branch.
	Restrictions []RestrictionsObservation `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type BranchProtectionv3Parameters struct {

	// The Git branch to protect.
	// The Git branch to protect.
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Boolean, setting this to true enforces status checks for repository administrators.
	// Setting this to 'true' enforces status checks for repository administrators.
	// +kubebuilder:validation:Optional
	EnforceAdmins *bool `json:"enforceAdmins,omitempty" tf:"enforce_admins,omitempty"`

	// The GitHub repository name.
	// The GitHub repository name.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`

	// Boolean, setting this to true requires all conversations on code must be resolved before a pull request can be merged.
	// Setting this to 'true' requires all conversations on code must be resolved before a pull request can be merged.
	// +kubebuilder:validation:Optional
	RequireConversationResolution *bool `json:"requireConversationResolution,omitempty" tf:"require_conversation_resolution,omitempty"`

	// Boolean, setting this to true requires all commits to be signed with GPG.
	// Setting this to 'true' requires all commits to be signed with GPG.
	// +kubebuilder:validation:Optional
	RequireSignedCommits *bool `json:"requireSignedCommits,omitempty" tf:"require_signed_commits,omitempty"`

	// Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
	// Enforce restrictions for pull request reviews.
	// +kubebuilder:validation:Optional
	RequiredPullRequestReviews []BranchProtectionv3RequiredPullRequestReviewsParameters `json:"requiredPullRequestReviews,omitempty" tf:"required_pull_request_reviews,omitempty"`

	// Enforce restrictions for required status checks. See Required Status Checks below for details.
	// Enforce restrictions for required status checks.
	// +kubebuilder:validation:Optional
	RequiredStatusChecks []BranchProtectionv3RequiredStatusChecksParameters `json:"requiredStatusChecks,omitempty" tf:"required_status_checks,omitempty"`

	// Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
	// Enforce restrictions for the users and teams that may push to the branch.
	// +kubebuilder:validation:Optional
	Restrictions []RestrictionsParameters `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type BranchProtectionv3RequiredPullRequestReviewsInitParameters struct {

	// :  Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
	BypassPullRequestAllowances []BypassPullRequestAllowancesInitParameters `json:"bypassPullRequestAllowances,omitempty" tf:"bypass_pull_request_allowances,omitempty"`

	// :  Dismiss approved reviews automatically when a new commit is pushed. Defaults to false.
	// Dismiss approved reviews automatically when a new commit is pushed.
	DismissStaleReviews *bool `json:"dismissStaleReviews,omitempty" tf:"dismiss_stale_reviews,omitempty"`

	// :  The list of app slugs with dismissal access.
	// The list of apps slugs with dismissal access. Always use slug of the app, not its name. Each app already has to have access to the repository.
	// +listType=set
	DismissalApps []*string `json:"dismissalApps,omitempty" tf:"dismissal_apps,omitempty"`

	// :  The list of team slugs with dismissal access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// The list of team slugs with dismissal access. Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("slug",true)
	// +listType=set
	DismissalTeams []*string `json:"dismissalTeams,omitempty" tf:"dismissal_teams,omitempty"`

	// References to Team in team to populate dismissalTeams.
	// +kubebuilder:validation:Optional
	DismissalTeamsRefs []v1.Reference `json:"dismissalTeamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate dismissalTeams.
	// +kubebuilder:validation:Optional
	DismissalTeamsSelector *v1.Selector `json:"dismissalTeamsSelector,omitempty" tf:"-"`

	// :  The list of user logins with dismissal access
	// The list of user logins with dismissal access.
	// +listType=set
	DismissalUsers []*string `json:"dismissalUsers,omitempty" tf:"dismissal_users,omitempty"`

	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// :  Require an approved review in pull requests including files with a designated code owner. Defaults to false.
	// Require an approved review in pull requests including files with a designated code owner.
	RequireCodeOwnerReviews *bool `json:"requireCodeOwnerReviews,omitempty" tf:"require_code_owner_reviews,omitempty"`

	// :  Require that the most recent push must be approved by someone other than the last pusher.  Defaults to false
	// Require that the most recent push must be approved by someone other than the last pusher.
	RequireLastPushApproval *bool `json:"requireLastPushApproval,omitempty" tf:"require_last_push_approval,omitempty"`

	// 6. This requirement matches GitHub's API, see the upstream documentation for more information.
	// Require 'x' number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6.
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty" tf:"required_approving_review_count,omitempty"`
}

type BranchProtectionv3RequiredPullRequestReviewsObservation struct {

	// :  Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
	BypassPullRequestAllowances []BypassPullRequestAllowancesObservation `json:"bypassPullRequestAllowances,omitempty" tf:"bypass_pull_request_allowances,omitempty"`

	// :  Dismiss approved reviews automatically when a new commit is pushed. Defaults to false.
	// Dismiss approved reviews automatically when a new commit is pushed.
	DismissStaleReviews *bool `json:"dismissStaleReviews,omitempty" tf:"dismiss_stale_reviews,omitempty"`

	// :  The list of app slugs with dismissal access.
	// The list of apps slugs with dismissal access. Always use slug of the app, not its name. Each app already has to have access to the repository.
	// +listType=set
	DismissalApps []*string `json:"dismissalApps,omitempty" tf:"dismissal_apps,omitempty"`

	// :  The list of team slugs with dismissal access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// The list of team slugs with dismissal access. Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +listType=set
	DismissalTeams []*string `json:"dismissalTeams,omitempty" tf:"dismissal_teams,omitempty"`

	// :  The list of user logins with dismissal access
	// The list of user logins with dismissal access.
	// +listType=set
	DismissalUsers []*string `json:"dismissalUsers,omitempty" tf:"dismissal_users,omitempty"`

	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// :  Require an approved review in pull requests including files with a designated code owner. Defaults to false.
	// Require an approved review in pull requests including files with a designated code owner.
	RequireCodeOwnerReviews *bool `json:"requireCodeOwnerReviews,omitempty" tf:"require_code_owner_reviews,omitempty"`

	// :  Require that the most recent push must be approved by someone other than the last pusher.  Defaults to false
	// Require that the most recent push must be approved by someone other than the last pusher.
	RequireLastPushApproval *bool `json:"requireLastPushApproval,omitempty" tf:"require_last_push_approval,omitempty"`

	// 6. This requirement matches GitHub's API, see the upstream documentation for more information.
	// Require 'x' number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6.
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty" tf:"required_approving_review_count,omitempty"`
}

type BranchProtectionv3RequiredPullRequestReviewsParameters struct {

	// :  Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
	// +kubebuilder:validation:Optional
	BypassPullRequestAllowances []BypassPullRequestAllowancesParameters `json:"bypassPullRequestAllowances,omitempty" tf:"bypass_pull_request_allowances,omitempty"`

	// :  Dismiss approved reviews automatically when a new commit is pushed. Defaults to false.
	// Dismiss approved reviews automatically when a new commit is pushed.
	// +kubebuilder:validation:Optional
	DismissStaleReviews *bool `json:"dismissStaleReviews,omitempty" tf:"dismiss_stale_reviews,omitempty"`

	// :  The list of app slugs with dismissal access.
	// The list of apps slugs with dismissal access. Always use slug of the app, not its name. Each app already has to have access to the repository.
	// +kubebuilder:validation:Optional
	// +listType=set
	DismissalApps []*string `json:"dismissalApps,omitempty" tf:"dismissal_apps,omitempty"`

	// :  The list of team slugs with dismissal access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// The list of team slugs with dismissal access. Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("slug",true)
	// +kubebuilder:validation:Optional
	// +listType=set
	DismissalTeams []*string `json:"dismissalTeams,omitempty" tf:"dismissal_teams,omitempty"`

	// References to Team in team to populate dismissalTeams.
	// +kubebuilder:validation:Optional
	DismissalTeamsRefs []v1.Reference `json:"dismissalTeamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate dismissalTeams.
	// +kubebuilder:validation:Optional
	DismissalTeamsSelector *v1.Selector `json:"dismissalTeamsSelector,omitempty" tf:"-"`

	// :  The list of user logins with dismissal access
	// The list of user logins with dismissal access.
	// +kubebuilder:validation:Optional
	// +listType=set
	DismissalUsers []*string `json:"dismissalUsers,omitempty" tf:"dismissal_users,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// :  Require an approved review in pull requests including files with a designated code owner. Defaults to false.
	// Require an approved review in pull requests including files with a designated code owner.
	// +kubebuilder:validation:Optional
	RequireCodeOwnerReviews *bool `json:"requireCodeOwnerReviews,omitempty" tf:"require_code_owner_reviews,omitempty"`

	// :  Require that the most recent push must be approved by someone other than the last pusher.  Defaults to false
	// Require that the most recent push must be approved by someone other than the last pusher.
	// +kubebuilder:validation:Optional
	RequireLastPushApproval *bool `json:"requireLastPushApproval,omitempty" tf:"require_last_push_approval,omitempty"`

	// 6. This requirement matches GitHub's API, see the upstream documentation for more information.
	// Require 'x' number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6.
	// +kubebuilder:validation:Optional
	RequiredApprovingReviewCount *int64 `json:"requiredApprovingReviewCount,omitempty" tf:"required_approving_review_count,omitempty"`
}

type BranchProtectionv3RequiredStatusChecksInitParameters struct {

	// :  The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and app_id like so "context:app_id".
	// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the 'context' and 'app_id' like so 'context:app_id'
	// +listType=set
	Checks []*string `json:"checks,omitempty" tf:"checks,omitempty"`

	// : [DEPRECATED]  The list of status checks to require in order to merge into this branch. No status checks are required by default.
	// +listType=set
	Contexts []*string `json:"contexts,omitempty" tf:"contexts,omitempty"`

	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// :  Require branches to be up to date before merging. Defaults to false.
	// Require branches to be up to date before merging.
	Strict *bool `json:"strict,omitempty" tf:"strict,omitempty"`
}

type BranchProtectionv3RequiredStatusChecksObservation struct {

	// :  The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and app_id like so "context:app_id".
	// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the 'context' and 'app_id' like so 'context:app_id'
	// +listType=set
	Checks []*string `json:"checks,omitempty" tf:"checks,omitempty"`

	// : [DEPRECATED]  The list of status checks to require in order to merge into this branch. No status checks are required by default.
	// +listType=set
	Contexts []*string `json:"contexts,omitempty" tf:"contexts,omitempty"`

	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// :  Require branches to be up to date before merging. Defaults to false.
	// Require branches to be up to date before merging.
	Strict *bool `json:"strict,omitempty" tf:"strict,omitempty"`
}

type BranchProtectionv3RequiredStatusChecksParameters struct {

	// :  The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and app_id like so "context:app_id".
	// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the 'context' and 'app_id' like so 'context:app_id'
	// +kubebuilder:validation:Optional
	// +listType=set
	Checks []*string `json:"checks,omitempty" tf:"checks,omitempty"`

	// : [DEPRECATED]  The list of status checks to require in order to merge into this branch. No status checks are required by default.
	// +kubebuilder:validation:Optional
	// +listType=set
	Contexts []*string `json:"contexts,omitempty" tf:"contexts,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// :  Require branches to be up to date before merging. Defaults to false.
	// Require branches to be up to date before merging.
	// +kubebuilder:validation:Optional
	Strict *bool `json:"strict,omitempty" tf:"strict,omitempty"`
}

type BypassPullRequestAllowancesInitParameters struct {

	// :  The list of app slugs with push access.
	// +listType=set
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// :  The list of team slugs with push access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("slug",true)
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// References to Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsRefs []v1.Reference `json:"teamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsSelector *v1.Selector `json:"teamsSelector,omitempty" tf:"-"`

	// :  The list of user logins with push access.
	// +listType=set
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type BypassPullRequestAllowancesObservation struct {

	// :  The list of app slugs with push access.
	// +listType=set
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// :  The list of team slugs with push access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// :  The list of user logins with push access.
	// +listType=set
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type BypassPullRequestAllowancesParameters struct {

	// :  The list of app slugs with push access.
	// +kubebuilder:validation:Optional
	// +listType=set
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// :  The list of team slugs with push access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("slug",true)
	// +kubebuilder:validation:Optional
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// References to Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsRefs []v1.Reference `json:"teamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsSelector *v1.Selector `json:"teamsSelector,omitempty" tf:"-"`

	// :  The list of user logins with push access.
	// +kubebuilder:validation:Optional
	// +listType=set
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type RestrictionsInitParameters struct {

	// :  The list of app slugs with push access.
	// The list of app slugs with push access.
	// +listType=set
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// :  The list of team slugs with push access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// The list of team slugs with push access. Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("slug",true)
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// References to Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsRefs []v1.Reference `json:"teamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsSelector *v1.Selector `json:"teamsSelector,omitempty" tf:"-"`

	// :  The list of user logins with push access.
	// The list of user logins with push access.
	// +listType=set
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type RestrictionsObservation struct {

	// :  The list of app slugs with push access.
	// The list of app slugs with push access.
	// +listType=set
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// :  The list of team slugs with push access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// The list of team slugs with push access. Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// :  The list of user logins with push access.
	// The list of user logins with push access.
	// +listType=set
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type RestrictionsParameters struct {

	// :  The list of app slugs with push access.
	// The list of app slugs with push access.
	// +kubebuilder:validation:Optional
	// +listType=set
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// :  The list of team slugs with push access.
	// Always use slug of the team, not its name. Each team already has to have access to the repository.
	// The list of team slugs with push access. Always use slug of the team, not its name. Each team already has to have access to the repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("slug",true)
	// +kubebuilder:validation:Optional
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// References to Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsRefs []v1.Reference `json:"teamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamsSelector *v1.Selector `json:"teamsSelector,omitempty" tf:"-"`

	// :  The list of user logins with push access.
	// The list of user logins with push access.
	// +kubebuilder:validation:Optional
	// +listType=set
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

// BranchProtectionv3Spec defines the desired state of BranchProtectionv3
type BranchProtectionv3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BranchProtectionv3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BranchProtectionv3InitParameters `json:"initProvider,omitempty"`
}

// BranchProtectionv3Status defines the observed state of BranchProtectionv3.
type BranchProtectionv3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BranchProtectionv3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BranchProtectionv3 is the Schema for the BranchProtectionv3s API. Protects a GitHub branch using the v3 / REST implementation.  The
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type BranchProtectionv3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.branch) || (has(self.initProvider) && has(self.initProvider.branch))",message="spec.forProvider.branch is a required parameter"
	Spec   BranchProtectionv3Spec   `json:"spec"`
	Status BranchProtectionv3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BranchProtectionv3List contains a list of BranchProtectionv3s
type BranchProtectionv3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BranchProtectionv3 `json:"items"`
}

// Repository type metadata.
var (
	BranchProtectionv3_Kind             = "BranchProtectionv3"
	BranchProtectionv3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BranchProtectionv3_Kind}.String()
	BranchProtectionv3_KindAPIVersion   = BranchProtectionv3_Kind + "." + CRDGroupVersion.String()
	BranchProtectionv3_GroupVersionKind = CRDGroupVersion.WithKind(BranchProtectionv3_Kind)
)

func init() {
	SchemeBuilder.Register(&BranchProtectionv3{}, &BranchProtectionv3List{})
}
