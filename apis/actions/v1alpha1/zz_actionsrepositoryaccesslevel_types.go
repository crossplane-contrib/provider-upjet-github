/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsRepositoryAccessLevelInitParameters struct {

	// Where the actions or reusable workflows of the repository may be used. Possible values are none, user, organization, or enterprise.
	// Where the actions or reusable workflows of the repository may be used. Possible values are 'none', 'user', 'organization', or 'enterprise'.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// The GitHub repository
	// The GitHub repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

type ActionsRepositoryAccessLevelObservation struct {

	// Where the actions or reusable workflows of the repository may be used. Possible values are none, user, organization, or enterprise.
	// Where the actions or reusable workflows of the repository may be used. Possible values are 'none', 'user', 'organization', or 'enterprise'.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The GitHub repository
	// The GitHub repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ActionsRepositoryAccessLevelParameters struct {

	// Where the actions or reusable workflows of the repository may be used. Possible values are none, user, organization, or enterprise.
	// Where the actions or reusable workflows of the repository may be used. Possible values are 'none', 'user', 'organization', or 'enterprise'.
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// The GitHub repository
	// The GitHub repository.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

// ActionsRepositoryAccessLevelSpec defines the desired state of ActionsRepositoryAccessLevel
type ActionsRepositoryAccessLevelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActionsRepositoryAccessLevelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActionsRepositoryAccessLevelInitParameters `json:"initProvider,omitempty"`
}

// ActionsRepositoryAccessLevelStatus defines the observed state of ActionsRepositoryAccessLevel.
type ActionsRepositoryAccessLevelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActionsRepositoryAccessLevelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActionsRepositoryAccessLevel is the Schema for the ActionsRepositoryAccessLevels API. Manages Actions and Reusable Workflow access for a GitHub repository
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type ActionsRepositoryAccessLevel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessLevel) || (has(self.initProvider) && has(self.initProvider.accessLevel))",message="spec.forProvider.accessLevel is a required parameter"
	Spec   ActionsRepositoryAccessLevelSpec   `json:"spec"`
	Status ActionsRepositoryAccessLevelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActionsRepositoryAccessLevelList contains a list of ActionsRepositoryAccessLevels
type ActionsRepositoryAccessLevelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActionsRepositoryAccessLevel `json:"items"`
}

// Repository type metadata.
var (
	ActionsRepositoryAccessLevel_Kind             = "ActionsRepositoryAccessLevel"
	ActionsRepositoryAccessLevel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActionsRepositoryAccessLevel_Kind}.String()
	ActionsRepositoryAccessLevel_KindAPIVersion   = ActionsRepositoryAccessLevel_Kind + "." + CRDGroupVersion.String()
	ActionsRepositoryAccessLevel_GroupVersionKind = CRDGroupVersion.WithKind(ActionsRepositoryAccessLevel_Kind)
)

func init() {
	SchemeBuilder.Register(&ActionsRepositoryAccessLevel{}, &ActionsRepositoryAccessLevelList{})
}
